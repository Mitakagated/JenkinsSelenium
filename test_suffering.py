# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestSuffering():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_suffering(self):
    self.driver.get("https://beeceptor.com/console/zupzup")
    self.driver.set_window_size(900, 959)
    self.driver.find_element(By.CSS_SELECTOR, ".active").click()
    element = self.driver.find_element(By.CSS_SELECTOR, ".btn:nth-child(4)")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    self.vars["window_handles"] = self.driver.window_handles
    self.driver.find_element(By.LINK_TEXT, "click here").click()
    self.vars["win1194"] = self.wait_for_window(2000)
    self.vars["root"] = self.driver.current_window_handle
    self.driver.switch_to.window(self.vars["win1194"])
    self.driver.close()
    self.driver.switch_to.window(self.vars["root"])
    self.driver.find_element(By.CSS_SELECTOR, ".event-header > .col-xs-12").click()
    self.driver.find_element(By.CSS_SELECTOR, ".col-xs-12 > .form-control").click()
    self.driver.find_element(By.CSS_SELECTOR, ".col-xs-12 > div > .form-control").click()
    self.driver.find_element(By.CSS_SELECTOR, ".event-header > .col-xs-12").click()
    self.driver.find_element(By.XPATH, "//a[@type=\'button\']").click()
    element = self.driver.find_element(By.ID, "ruleEnabled")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.ID, "ruleEnabled").click()
    self.driver.find_element(By.ID, "ruleEnabled").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    self.driver.find_element(By.ID, "createNew").click()
    self.driver.find_element(By.ID, "matchPath").click()
    self.driver.find_element(By.XPATH, "//input[@id=\'matchPath\']").send_keys("da")
    self.driver.find_element(By.ID, "pathOperator").click()
    dropdown = self.driver.find_element(By.ID, "pathOperator")
    dropdown.find_element(By.XPATH, "//option[. = 'Request path starts with']").click()
    self.driver.find_element(By.CSS_SELECTOR, "#pathOperator > option:nth-child(3)").click()
    self.driver.find_element(By.ID, "pathOperator").click()
    dropdown = self.driver.find_element(By.ID, "pathOperator")
    dropdown.find_element(By.XPATH, "//option[. = 'Request path contains']").click()
    self.driver.find_element(By.CSS_SELECTOR, "#pathOperator > option:nth-child(4)").click()
    self.driver.find_element(By.ID, "pathOperator").click()
    dropdown = self.driver.find_element(By.ID, "pathOperator")
    dropdown.find_element(By.XPATH, "//option[. = 'Request path exactly matches']").click()
    self.driver.find_element(By.CSS_SELECTOR, "#pathOperator > option:nth-child(2)").click()
    self.driver.find_element(By.ID, "saveRule").click()
    self.driver.find_element(By.CSS_SELECTOR, ".modal-lg > .modal-content > .modal-header span").click()
    self.vars["window_handles"] = self.driver.window_handles
    self.driver.find_element(By.LINK_TEXT, "click here").click()
    self.vars["win1099"] = self.wait_for_window(2000)
    self.driver.switch_to.window(self.vars["win1099"])
    self.driver.close()
    self.driver.switch_to.window(self.vars["root"])
  
